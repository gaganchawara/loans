// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gaganchawara/loans/internal/loan/interfaces (interfaces: Repository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	aggregate "github.com/gaganchawara/loans/internal/loan/aggregate"
	entity "github.com/gaganchawara/loans/internal/loan/entity"
	errors "github.com/gaganchawara/loans/pkg/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// LoadLoan mocks base method.
func (m *MockRepository) LoadLoan(arg0 context.Context, arg1 string) (*entity.Loan, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLoan", arg0, arg1)
	ret0, _ := ret[0].(*entity.Loan)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// LoadLoan indicates an expected call of LoadLoan.
func (mr *MockRepositoryMockRecorder) LoadLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLoan", reflect.TypeOf((*MockRepository)(nil).LoadLoan), arg0, arg1)
}

// LoadLoanAgg mocks base method.
func (m *MockRepository) LoadLoanAgg(arg0 context.Context, arg1 string) (*aggregate.LoanAgg, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadLoanAgg", arg0, arg1)
	ret0, _ := ret[0].(*aggregate.LoanAgg)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// LoadLoanAgg indicates an expected call of LoadLoanAgg.
func (mr *MockRepositoryMockRecorder) LoadLoanAgg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadLoanAgg", reflect.TypeOf((*MockRepository)(nil).LoadLoanAgg), arg0, arg1)
}

// LoadRepayment mocks base method.
func (m *MockRepository) LoadRepayment(arg0 context.Context, arg1 string) (*entity.Repayment, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRepayment", arg0, arg1)
	ret0, _ := ret[0].(*entity.Repayment)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// LoadRepayment indicates an expected call of LoadRepayment.
func (mr *MockRepositoryMockRecorder) LoadRepayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRepayment", reflect.TypeOf((*MockRepository)(nil).LoadRepayment), arg0, arg1)
}

// LoadRepaymentsByLoanID mocks base method.
func (m *MockRepository) LoadRepaymentsByLoanID(arg0 context.Context, arg1 string) ([]*entity.Repayment, errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRepaymentsByLoanID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Repayment)
	ret1, _ := ret[1].(errors.Error)
	return ret0, ret1
}

// LoadRepaymentsByLoanID indicates an expected call of LoadRepaymentsByLoanID.
func (mr *MockRepositoryMockRecorder) LoadRepaymentsByLoanID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRepaymentsByLoanID", reflect.TypeOf((*MockRepository)(nil).LoadRepaymentsByLoanID), arg0, arg1)
}

// SaveLoan mocks base method.
func (m *MockRepository) SaveLoan(arg0 context.Context, arg1 *entity.Loan) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoan", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// SaveLoan indicates an expected call of SaveLoan.
func (mr *MockRepositoryMockRecorder) SaveLoan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoan", reflect.TypeOf((*MockRepository)(nil).SaveLoan), arg0, arg1)
}

// SaveLoanAgg mocks base method.
func (m *MockRepository) SaveLoanAgg(arg0 context.Context, arg1 *aggregate.LoanAgg) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoanAgg", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// SaveLoanAgg indicates an expected call of SaveLoanAgg.
func (mr *MockRepositoryMockRecorder) SaveLoanAgg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoanAgg", reflect.TypeOf((*MockRepository)(nil).SaveLoanAgg), arg0, arg1)
}

// SaveRepayment mocks base method.
func (m *MockRepository) SaveRepayment(arg0 context.Context, arg1 *entity.Repayment) errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRepayment", arg0, arg1)
	ret0, _ := ret[0].(errors.Error)
	return ret0
}

// SaveRepayment indicates an expected call of SaveRepayment.
func (mr *MockRepositoryMockRecorder) SaveRepayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRepayment", reflect.TypeOf((*MockRepository)(nil).SaveRepayment), arg0, arg1)
}
